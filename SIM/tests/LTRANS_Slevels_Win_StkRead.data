i
! ******************************* LTRANS Input Data File  *******************************

!----  This is the file that contains input values for LTRANS with parameters grouped ---
!----  (Previously LTRANS.inc)


!*** NUMBER OF PARTICLES ***
$numparticles
  numpar =  98              ! Number of particles (total number for whole simulation)
                              ! numpar should equal the number of rows in the particle 
                              ! locations input file
$end

!*** TIME PARAMETERS ***
$timeparam
  days   =   7.95          ! Number of days to run the model (float)
  iprint =  3600             ! Print interval for LTRANS output (s); 3600 = every hour
  iprinto=     0             ! Initial delay in printing after Ext0, in seconds (leave to 0 to start printing at Ext0) 
  dt =      86400       ! External time step (duration between hydro model predictions) (s) 
  idt    =  120              ! Internal (particle tracking) time step (s)
  Ext0   =      00                ! Initial time t0 (in seconds)
$end



!*** HYDRODYNAMIC MODULE PARAMETERS ***
$hydroparam
  us         = 10       ! Number of Rho grid s-levels in hydro model
  ws         = 11       ! Number of W grid s-levels in hydro model
  tdim       = 4              ! Number of time steps per hydro predictions file
  recordnum    = 1               ! Record number of first time step to be read (when no previous time steps in the hydro file: recordnum=1)
  hc         = 0.2               ! Min Depth - used in ROMS S-level transformations
  z0         = 0.0005            ! ROMS bottom roughness parameter (Zob). Bottom layer is considered  to be between z0 and BottomLayerThickness
  Vtransform = 3                 ! 0: z-coordinate ; 1: WikiRoms Eq. 1 ; 2:WikiRoms Eq. 2 ; 3: Song/Haidvogel 1994 Eq. 0-sigma coordinate system
                                 ! 4: z*=H(z-Eta)/(H+Eta) Where H is bottom depth
                                 ! and Eta is the sea surface elevation
  VInterpUVinSurfWater = .TRUE.  ! If False keep U,V velocities of last level in surface water instead of running the vertical interpolation
  BottomLayerThickness = 2.0     ! If > 0.0 this value will be used instead of the half height of the bottom grid cell
  PercentVelinBottomLayer = 0.0  ! If > 0.0 this value will be used instead of the logarithmic law (must be in range ]0.0,1.0[)
  PercentVel_under_z0 =0.05      ! This value will be used to perform advection between botttom and z0
  readZeta   = .TRUE.          ! If .TRUE. read in sea-surface height   (zeta) from NetCDF file, else use constZeta
  constZeta  = 0.0               ! Constant value for Zeta if readZeta is .FALSE.
  readSalt   = .FALSE.          ! If .TRUE. read in salinity             (salt) from NetCDF file, else use constSalt
  constSalt  = 0.0               ! Constant value for Salt if readSalt is .FALSE.
  readTemp   = .FALSE.          ! If .TRUE. read in temperature          (temp) from NetCDF file, else use constTemp
  constTemp  = 0.0               ! Constant value for Temp if readTemp is .FALSE.
  readU      = .FALSE.             ! If .TRUE. read in u-momentum component (U   ) from NetCDF file, else use constU
  constU     = 0.0               ! Constant value for U if readU is .FALSE.
  readV      = .FALSE.             ! If .TRUE. read in v-momentum component (V   ) from NetCDF file, else use constV
  constV     = 0.0               ! Constant value for V if readV is .FALSE.
  readW      = .FALSE.             ! If .TRUE. read in w-momentum component (W   ) from NetCDF file, else use constW
  constW     = 0.0               ! Constant value for W if readW is .FALSE.
  readAks    = .FALSE.           ! If .TRUE. read in salinity vertical diffusion coefficient (Aks ) from NetCDF file, els
                                 ! use constAks
  constAks   = 0.0               ! Constant value for Aks if readAks is .FALSE.
  readDens   = .FALSE.
  constDens  = 1000.0 

  readUwind  = .TRUE.        ! If .TRUE. read in Uwind from NetCDF file, else use constUwind
  constUwind = 0.00             ! Constant value for Uwind if readUwind is .FALSE.
  readVwind  = .TRUE.        ! If .TRUE. read in Vwind from NetCDF file, else use constVwind
  constVwind = 0.00             ! Constant value for Vwind if readVwind is .FALSE.
  readIwind  = .False.          ! If .TRUE. read in Iwind from NetCDF file, else use constIwind
  constIwind = 0.00             ! Constant value for Iwind if readIwind is .FALSE.
  readStokDrift = .TRUE.     ! If .TRUE. read in StokDrift from NetCDF file, else use StokDriftFac and wind fields to compute Stokes Drift

  Wind               = .TRUE.  ! If .TRUE. then WindDrift and StokesDrift are enabled 
                                !  set to .TRUE. to enable the oil module to compute the weathering using the wind fields  
  WindIntensity      = .False.  ! If .TRUE. Then the wind intensity field will be used for oil weathering
                                ! in place of the calculation of the intensity as a function of UWind and VWind.
  WindWeatherFac = 0.6          ! Set to 1 to use the full wind intensity for oil weathering
                                ! set to lower values (0<WindWeatherFac<=1) to use a reduced wind intensity for the weathering

  WindDriftFac=0.035            ! Wind Drift factor, initially 0.035 in OILTRANS 
  WindDriftDev=5.0              ! Wind Drift deviation in degrees (offset to RHS of wind vector), initially 5.0 in OILTRANS 
  StokDriftFac=0.016            ! Stokes Drift factor, initially 0.016 in OILTRANS 
  Stokes             = .True.  ! if .TRUE. and Wind is .TRUE. then apply Stokes Drift
  Stokes_hc=0.3                 ! Stokes drift read as a separate variable will be
                                ! applied at 100% intensity in depth range [hc,0] meters,
  Stokes_ke=5.0                 ! bellow Stokes_hc, apply exponential decay Stk(Z)=Stk0*exp(-|ke|*(Z-|hc|)) 
                                ! depth hc and then decays up to only 5% of the Stokes drift at -1m depth
  LinearVInterp=.False.         ! if .TRUE. then TSPACK is disabled and a linear interpolation is performed 
                                ! along the vertical direction instead of the tension spline fitting
$end



!*** TURBULENCE MODULE PARAMETERS ***
$turbparam

  HTurbOn       = .FALSE.   ! Horizontal Turbulence on (.TRUE.) or off (.FALSE.)
  VTurbOn       = .FALSE.   ! Vertical   Turbulence on (.TRUE.) or off (.FALSE.)
  ConstantHTurb = 1.0       ! Constant value of horizontal turbulence (m2/s)

$end
!*** BEHAVIOR MODULE PARAMETERS ***
$behavparam
  Behavior =  0              ! Behavior type (specify a number)
                             !   Note: The behavior types numbers are: 
                             !     0 Passive, 1 near-surface, 2 near-bottom, 3 DVM, 
                             !     4 C.virginica oyster larvae, 5 C.ariakensis oyster larvae, 
                             !     6 : vertical sinking or floating without random motion
                             !     7: Tidal Stream Transport, 8: Nephrops Norvegicus
                             !     9 : Solea,  10 : Mullus Barbatus, 11 : Parametrizable larvae
                             !     998 : Keep constant depth under zero, 999 : Keep constant depth under zetasink      = 0.0            ! Sinking velocity for behavior type 6 and 8 to 11
                             !     1000: Oil Spill  
  OpenOceanBoundary = .TRUE. ! Note: If you want to allow particles to "escape" via open ocean 
                             !   boundaries, set this to TRUE; Escape means that the particle 
                             !   will stick to the boundary and stop moving
  mortality = .TRUE.         ! TRUE if particles can die; else FALSE
  deadage = 2678400 ! 1month !Age at which a particle stops moving (i.e., dies) (s)
                             !   Note: deadage stops particle motion for all behavior types
  pediage = 000000001        ! Age when particle reaches max swim speed and can settle (s)
    			     ! Note: keep pediage > 0 in any case
                             ! Note: for oyster larvae behavior types (4 & 5), 
                             !     pediage = age at which a particle becomes a pediveliger
                             !   Note: pediage does not cause particles to settle if 
                             !     the Settlement module is not on
  swimstart = 0.0            ! Age that swimming or sinking begins (s) 1 day = 1.*24.*3600.
  swimslow  = 0.000          ! Swimming speed when particle begins to swim (m/s)
  swimfast  = 0.000          ! Maximum swimming speed (m/s)  0.05 m/s for 5 mm/s
                             !   Note: for constant swimming speed for behavior types 1,2 & 3, 
                             !     set swimslow = swimfast = constant speed
  Sgradient = 1.0            ! Salinity gradient threshold that cues larval behavior (psu/m)
                             !   Note: This parameter is only used if Behavior = 4 or 5. 
  sink      = 0.0            ! Sinking velocity for behavior type 6 and 8 to 11
  rise      = 0.0            ! Rising velocity after spawning  for behavior type 8 to 11

! Tidal Stream Transport behavior type:
  Hswimspeed = 0.9           ! Horizontal swimming speed (m/s)
  Swimdepth  = 2             ! Depth at which fish swims during flood time 
                             ! in meters above bottom (this should be a positive value
                             ! Note: this formulation may need some work

  GrainSize_fname = "GRAINSIZEFILENAME" ! for Behavior 8
  read_GrainSize  = .False.           ! for Behavior 8
  DVMtime = 0                         ! maximum time spent doing DVM (if DVMtime>0, used for behavior 8 and 9 and 11)
  SettlementSize = 14              
  surflayer_upperdepth  =25.0         ! Minimal Depth of the surface layer for Behavior 9 and 11
  surflayer_lowerdepth  =30.0         ! Maximal Depth of the surface layer for Behavior 8, 9 and 11
  surflayer_upperdepth_night  = 0.0   ! Minimal Depth of the surface layer for Behavior 9 and 11
  surflayer_lowerdepth_night  = 5.0   ! Maximal Depth of the surface layer for Behavior 8, 9 and 11
  SeabedRelease          = .False.    ! Set to .True. to set initial depth of the particles at `SeabedRelease_meters` above the bottom
  SeabedRelease_meters   = 1.0        ! Height above the bottom at which particles are released if SeabedRelease is True
  Seabed_layerheight     = 1.0        ! Height of the layer just above the sea bed were particles shall stay
                                      !    for post DVM phase (grown larvae searching for sediment)
  Write_Temp_min_max_ins = 'ins'      ! values 'min', 'max', or 'ins' per "instantaneous"
  Write_Salt_min_max_ins = 'ins'      ! values 'min', 'max', or 'ins' per "instantaneous"
  Write_coastdist =.False.            ! if True write closest coast distance in netcdf output file
  vertical_vel_file='NONE'            ! For Behavior 6 only
$end

!*** DVM. The following are parameters for the Diurnal Vertical Migration (DVM) behavior type ***
!  Note: These values were calculated for September 1 at the latitude of 37.0 (Chesapeake Bay mouth)
!  Note: Variables marked with ** were calculated with light_v2BlueCrab.f (not included in LTRANS yet)
$dvmparam
!  Note: Thes following parameters are only used if Behavior = 3 
  twistart  = 4.801821       ! Time of twilight start (hr) **
  twiend    = 19.19956       ! Time of twilight end (hr) **
  daylength = 14.39774       ! Length of day (hr) **
  Em        = 1814.328       ! Irradiance at solar noon (microE m^-2 s^-1) **
  Kd        = 1.07           ! Vertical attenuation coefficient
  thresh    = 0.0166         ! Light threshold that cues behavior (microE m^-2 s^-1)
!  Note: The following parameters are only used if Behavior = 8,9,10 or 11
  swdown_ASCII    = .FALSE.  ! Set to .True. to read swdown_ASCIIfname file 
  swdown_ASCIIfname  = 'swdown_test.txt'
  swdown_dt     = 3600       ! timestep between two swdown data
  swdown_rec    =  36230     ! first record to be read 
  swdown_thresh = 50.        ! swdown threshold to set the day or night upper layer as a target layer
  swdown_t0 = 1800.          ! time in seconds (same referential as Ext0) of the record corresponding to swdown_rec
$end



!*** SETTLEMENT MODULE PARAMETERS ***
$settleparam
 settlementon = .FALSE.      ! settlement module on (.TRUE.) or off (.FALSE.)
                             ! Note: If settlement is off: set minholeid, maxholeid, minpolyid,
                             !   maxpolyid, pedges, & hedges to 1 
                             !   to avoid both wasted variable space and errors due to arrays of size 0.
                             ! If settlement is on and there are no holes: set minholeid,
                             !   maxholeid, and hedges to 1
 holesExist = .FALSE.        ! Are there holes in habitat? yes(TRUE) no(FALSE)
 minpolyid  = 100000         ! Lowest habitat polygon id number
 maxpolyid  = 100000         ! Highest habitat polygon id number
 minholeid  = 1              ! Lowest hole id number
 maxholeid  = 1              ! Highest hole id number
 pedges     = 5              ! Number of habitat polygon edge points (# of rows in habitat polygon file)
 hedges     = 1              ! Number of hole edge points (number of rows in holes file)

 storedincolor=1                ! if ==1: If particle is in a polygon, store the poly-number in color array
				! if ==2: store the element number in which is the particle in color array
				! if ==0: store Status in color array
$end

$strandingparam
 stranding_on = .FALSE.             ! stranding module on (.TRUE.) or off (.FALSE.)
 StrandingDist= 50.0                ! Stranding Distance in meters from land 
 strandingMaxDistFromSurf = 99999.0 ! maximal distance from surface at which stranding can occur 
                                    ! (if strandingMaxDistFromSurf > maximal depth of the domain, 
                                    ! then stranding becomes independent of the distance from the surface)
 strandingMaxDistFromBott = 99999.0 ! maximal distance from bottom depth at which stranding can occur
                                    ! (if strandingMaxDistFromBott > maximal depth of the domain, 
                                    ! then stranding becomes independent of the distance from the bottom)
  refloat  = .FALSE.
  refloat_Pc = 0.0
  refloat_Po = 0.5
  refloat_Tc = 864000
$end


!*** CONVERSION MODULE PARAMETERS ***
$convparam

  PI = 3.14159265358979         ! Pi
  Earth_Radius = 6378000        ! Equatorial radius of Earth (m)
  SphericalProjection = .TRUE.  ! Spherical Projection from ROMS if TRUE. If FALSE, mercator projection is used. 
  latmin = 17.0            ! Minimum longitude value, only used if SphericalProjection is .TRUE.
  lonmin = 41.0            ! Minimum  latitude value, only used if SphericalProjection is .TRUE.
$end



!*** INPUT FILE NAME AND LOCATION PARAMETERS ***; 
! ** NetCDF Hydro Model Grid file **
$hydromodelgrid
  NCgridfile='../input/GridforLTRANS-Slevels.nc'  ! Name of the grid file created by the pre-processing tool
  Zgrid = .FALSE.                                              ! If .TRUE. read in MITgcm z-coordinate grid and hydrodynamic variables
  Zgrid_depthinterp = .FALSE.                                  ! If .TRUE. interpolates depth to make the Z grid bathymetry
                                                              !       smoother (for Zgrid bathymetry only) 
  ADJele_fname= '../input/Adjacentelements-Slevels.data' ! Binary file of adjacent element matrix
  ADJele_file= .False.                                        ! set to True if file already exists
$end


! ** Hydro Model Predictions NetCDF Input (History) File **
  !Filename = prefix + filenum + suffix
$hydromodeloutput
  dirin='../fake_fields/'
  prefix_Zeta = 'fake_hydro_field_'      
  prefix_Salt = 'fake_hydro_field_'      
  prefix_Temp = 'fake_hydro_field_'      
  prefix_Uvel = 'fake_hydro_field_'      
  prefix_Vvel = 'fake_hydro_field_'      
  prefix_Wvel = 'fake_hydro_field_'      
  prefix_Aks  = 'fake_hydro_field_'      
  prefix_Dens = 'fake_hydro_field_'      
  prefix_Uwind= 'fake_hydro_field_'      
  prefix_Vwind= 'fake_hydro_field_'      
  prefix_Iwind= ''      
  prefix_Ustokes= 'fake_hydro_field_'      
  prefix_Vstokes= 'fake_hydro_field_'      
  numdigits = 10                     ! Number of digits in number portion of file name (with leading zeros)
  suffix='.nc'                       ! NetCDF Input Filename suffix
  filenum =    0                      ! Number in first NetCDF input filename
  filestep = 3456                   ! Number between NetCDF input filename
  hydrobytes = 8.0                ! Number of bytes of float variables: single =4 bytes, double = 8 bytes
  startfile = .FALSE.                     ! Is it the first file, i.e. does the file have an additional time step?
$end


! ** Particle Location Input File **
  !Note: the path to the file is necessary if the file is not in the same folder as the code
$parloc
  parfile  = '../input/Iniparloc_every_6_rhowaternode.csv'    !Particle locations
$end


! ** Habitat Polygon Location Input Files **
!Note: the path to the file is necessary if the file is not in the same folder as the code
$habpolyloc
  habitatfile = '../../input//Polygon_boxes_NiNj64_global.csv'    !Habitat polygons
  holefile    = '../../input//End_holes.csv'  !Holes in habitat polygons
$end


! ** Output Related Variables **
$output

  !NOTE: Full path must already exist.  Model can create files, but not directories.
  outpath = './'  ! Location to write output .csv and/or .nc files  
                                 ! Use outpath = './' to write in same folder as the executable
  NCOutFile = 'LTRANS_Slevels_Win_StkRead'       ! Name of the NetCDF output files (do not include .nc)
  outpathGiven = .TRUE.          ! If TRUE files are written to the path given in outpath
  writeCSV     = .TRUE.          ! If TRUE write CSV output files
  writePARA    = .FALSE.         ! If TRUE write PARA.CSV output files
  writeNC      = .TRUE.          ! If TRUE write .NC output files
  NCtime       = 0               ! Time interval between creation of new NetCDF output files (seconds)
                                 ! Note: setting this to 0 will result in just one large output file

  !NetCDF Model Metadata (these will be stale unless you edit them):
  SVN_Version  = 'https://cmgsoft.repositoryhosting.com/svn/cmgsoft_ltrans/trunk'
  RunName      = 'LTRANS vZlev with Partial Bottom Cells'
  ExeDir       = '.'
  OutDir       = 'metadata'
  RunBy        = 'Celia Laurent'
  Institution  = 'OGS'
  StartedOn    = '16 sept 2022'
$end



!*** OTHER PARAMETERS *** 
$other

  seed         = 9           ! Seed value for random number generator (Mersenne Twister)
  ErrorFlag    = 2           ! What to do if an error is encountered: 0=stop, 1=return particle to previous location,
                             ! 2=kill particle & stop tracking that particle, 3=set particle out of bounds & 
                             ! stop tracking that particle
                             ! Note: Options 1-3 will output information to ErrorLog.txt
                             ! Note: This is only for particles that travel out of bounds illegally
  BndOut  =  .FALSE.         ! Write on stdout  and in python files detail of the boundary computations
  BoundaryBLNs = .TRUE.      ! Create Surfer Blanking Files of boundaries? .TRUE.=yes, .FALSE.=no
  SaltTempOn   = .FALSE.      ! Calculate salinity and temperature at particle 
        	                  ! location: yes (.TRUE.) or no (.FALSE.)
  TrackCollisions  = .TRUE.  ! Write Bottom and Land Hit Files? .TRUE.=yes, .FALSE.=no
  WriteHeaders     = .FALSE. ! Write .txt files with column headers? .TRUE.=yes, .FALSE.=no
  WriteModelTiming = .FALSE. ! Write .csv file with model timing data? .TRUE.=yes, .FALSE.=no
  WriteParfile = .FALSE.     ! Write .csv file with particle locations for each external timestep ? .TRUE.=yes, .FALSE.=no
  WriteCurrents = .FALSE.    ! Write .csv file with particle advection currents and locations at each internal timestep? .TRUE.=yes, .FALSE.=no

  ijbuff = 70                ! number of extra elements to read in on every side of the particles

  FreeSlip = .FALSE.         ! enable the use of the free slip condition

  OilOn       = .FALSE.      ! Set to True to perform oil spill simulations
$end


$oilparams
  VolumeSpill        = 391
  SecSpill           = 0
  API                = 36.4        
! Following parameters Oil_Dens & Oil_Dens_RefT not indispensable, if not given density is computed from API
  Oil_Dens           = 0  ! 843        ! if (Oil_Dens>0.0) need to give values to  Oil_Dens_RefT
  Oil_Dens_RefT      = 0  ! 288        ! Ref Temp at which density is calculated (273+15)
!
  Watertemp          = -99999.0
! Dyn_Visc can be set to null if Kin_Visc is given!
  Dyn_Visc           = 0.0  !0.004      ! ( kg/ms  or cP ?? seem to be kg/ms) 
  Kin_Visc           = 0.0000045        ! (m2/s) - [1.2 - 4]e-6 m2/seconds while it was by default 1.7e-5 !! POSSIBLE??
  Dyn_Visc_RefT      = 273              ! Ref Temp at which Dyn_Visc is calculated 
  Kin_Visc_RefT      = 293    !20°C     ! Ref Temp at which Kin_Visc is calculated 
  Cut_Unit           = 'weight'
  Oil_Asph           = 0
  Oil_Resin          = 0
  Oil_Sat            = 45
!for Fingas Evap:choose net 3 parameters according to table in "Modeling Oil and Petroleum Evaporation" by Fingas, 2013 
  Fingas_B           = 0.39       !for Fingas Evap:
  Fingas_T           = 0.013      !for Fingas Evap:
  Fingas_TYP         = 2          !for Fingas Evap: 1 For oils (most oils and petroleum products) and 2 for oils  like  diesel  fuel 
  Cut_Temp           = 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
!313,373,413,433,473,523,573,623,673,723,773,823,873,923,973               ! For Mackay Evap (else =0*15
  Cut_Frac           = 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
!0.01,0.02,0.12,0.15,0.21,0.31,0.41,0.52,0.61,0.71,0.79,0.85,0.9,0.94,0.97 ! For Mackay Evap (else =0*15
$end

$oilprocs
  Spreading          = .True.
  AreaOption         = 'ADIOS2'
  SprdOption         = 'ADIOS2'
  Evaporation        = .True.
  EvapOption         = 'MACKAY'
  Emulsification     = .True.
  Remove_Stranded_Oil= .False.
  Dispersion         = .True.
  Langmuir           = .False.
$end

$windswaves
  WindWaveModel      = .False.
  swan_prefix        = '/swan_model_his_'
  swan_filenum       = 1000
  swan_suffix        = '.nc'
  SigWaveHeight      = -999
  SigWavePeriod      = -999
  SigWaveLength      = -999
  MeanWavePeriod     = -999
  UWind_10           = -999
  VWind_10           = -999
  PeakDirection      = -999
  PeakWaveLength     = -999
  MixingDepth        = -999
  Cd                 = -999
  Disper             = -999
$end


